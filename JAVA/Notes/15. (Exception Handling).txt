->ERRORS
(1)Syntax errors : When compiler finds something wrong with our program, it throws a syntax error.
Eg. int a=5; 
    sout(a);
    d=10;       // syntax error since d isn't defined
    sout(d);
    int b=23         // syntax error as no ;
    
(2)Logical errors: A BUG occurs when program compiles and runs but does the wrong thing. 
Eg. while (true) {
    System.out.println("Hello"); // prints "Hello" infinitely
}
OR
int x = 5;
if (x > 10 || x < 0) {
    System.out.println("Invalid input"); // should not be printed
}

(3)Runtime errors: 
Java sometimes may encounter error while program is running.They are called EXCEPTIONS. They are handled later using EXCEPTION HANDLING.
They occur due to bad inputs(like program is asking user to enter a string and user is entering an integer).
Eg.     String str = null;
        int length = str.length(); // This will throw a NullPointerException because str is null

NOTE:Syntax errors & logical errors are encountered by the programmer whereas the Runtime errors are encountered by the user.

-> Exception Handling
Exception is an unexpected or unwanted or abnormal condition occured at RUNTIME. In Java, an exception is an event that disrupts the normal flow of the program. 
It is an object which is thrown at runtime.
Exception Handling is a mechanism to handle runtime errors, to handle the exceptions we should have an alternate source.
Example:
class A{
   public static void main(String[]args){
       int a=10,b=0,c;
       c = a/b;            // exception
       sout(c);
}} 
Since we can't divide a number by 0, wherever we got exception, no further lines will get executed.

-> Types of Exceptions
(i)Checked Exception: Compile Time Exception
(ii)Unchecked Exception: Runtime Exceptions

-> To handle the exceptions:
(i) try  (ii) catch   (iii)throw  (iv)throws  (v)finally

-> TRY & CATCH
public static void main(String[] args){
        int a = 100;
        int b = 0;
        try{
            int c = a / b;
            System.out.println("The result is " + c);
        }
        catch (Exception e){
            System.out.println("We failed to divide.Reason: ");
            System.out.println(e);
        }
        System.out.println("End of the program.");
    }
// We failed to divide.Reason: 
java.lang.ArithmeticException: / by zero
End of the program.





















































