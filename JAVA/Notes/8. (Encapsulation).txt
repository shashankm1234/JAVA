-> Encapsulation in Java
 Process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.
We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use 
setter and getter methods to set and get the data in it.

GETTER and SETTER
You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). 
However, it is possible to access them if we provide public get and set methods.
The get method returns the variable value, and the set method sets the value.
Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case.
NOTE: In c++, by default data members & member functions were private so we didn't need to write private, but in Java we need to specify private,public or protected.
public class Person {
  private String name;   // private = restricted access
  // Getter
  public String getName() {
    return name;
  }
  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}

Q. Why Encapsulation?
Ans. (i) Better control of class attributes(i.e. data members) and methods(i.e. member functions).
(ii) Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method).
(iii) Flexible: the programmer can change one part of the code without affecting other parts
(iv) Increased security of data
(v) Data Hiding: it is a way of restricting the access of our data members by hiding the implementation details. Encapsulation also provides a way for data hiding. 
The user will have no idea about the inner implementation of the class. It will not be visible to the user how the class is storing values in the variables. 

ENCAPSULATION CODE:
// Example 1
/*
class Person {

    private String name;
    private int age;

    // getter (to get name)
    public String getName() {
        return name;
    }

    // setter (to set name)
    public void setName(String name) {
        this.name = name;
    }

    // getter (to get age)
    public int getAge() {
        return age;
    }

    // setter (to set age)
    public void setAge(int age) {
        this.age = age;
    }
}

public class Encapsulation {
    public static void main(String[] args)
    {
        Person person = new Person();
        person.setName("John");
        person.setAge(30);
        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
    }
}
 */

// Example 2
class Encapsulate{
    private String geekName;
    private int geekRoll;
    private int geekAge;

    // getter(to return geekAge)
    public int getAge() {
        return geekAge;
    }

    // getter(to return geekName)
    public String getName() {
        return geekName;
    }

    // getter(to return geekRoll)
    public int getRoll() {
        return geekRoll;
    }

    // setter(to set geekAge)
    public void setAge(int newAge) {
        geekAge = newAge;
    }

    // setter(to set geekName)
    public void setName(String newName)
    {
        geekName = newName;
    }

    // setter(to set geekRoll)
    public void setRoll(int newRoll) {
        geekRoll = newRoll;
    }
}

public class Encapsulation {
    public static void main(String[] args)
    {
        Encapsulate obj = new Encapsulate();

        // setting values of the variables
        obj.setName("Harsh");
        obj.setAge(19);
        obj.setRoll(51);

        // Displaying values of the variables
        System.out.println("Geek's name: " + obj.getName());
        System.out.println("Geek's age: " + obj.getAge());
        System.out.println("Geek's roll: " + obj.getRoll());
    }
}














































