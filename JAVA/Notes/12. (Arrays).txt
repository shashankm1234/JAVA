-> ARRAYS
In Java, an array is an object.
Array is a collection of similar type of elements which has contiguous memory location.
Java array is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements. 
We can store only a fixed set of elements in a Java array.

*Advantages
Code Optimization: It makes the code optimized, we can retrieve or sort the data efficiently.
Random access: We can get any data located at an index position.

*Disadvantages
Size Limit: We can store only the fixed size of elements in the array. It doesn't grow its size at runtime. 
To solve this problem, collection framework is used in Java which grows automatically.

-> declaration, instantiation and initialization together
int a[]={33,3,4,5};

-> Print the array elements using for-each loop  
class Testarray1{  
public static void main(String args[]){  
int arr[]={33,3,4,5};  
//printing array using for-each loop  
for(int i:arr)  
   System.out.println(i);  
}}  

-> Demonstrate the way of passing an array to method.  
class Testarray2{  
//creating a method which receives an array as a parameter  
static void min(int arr[]){  
int min=arr[0];  
for(int i=1;i<arr.length;i++)  
 if(min>arr[i])  
  min=arr[i];  
  
System.out.println(min);  
}  
public static void main(String args[]){  
      int a[]={33,3,4,5};//declaring and initializing an array  
      min(a);//passing array to method  
}}  

-> Return an array from the method  
class TestReturnArray{  
//creating method which returns an array  
static int[] get(){  
   return new int[]{10,30,50,90,60};  
}  
public static void main(String args[]){  
   //calling method which returns an array  
   int arr[]=get();  
   //printing the values of an array  
   for(int i=0;i<arr.length;i++)  
   System.out.println(arr[i]);  
}}  





















